- route:
    id: myroute
    from:
      uri: platform-http:/camel/chat
      steps:
        - process:
            description: AI message
            ref: createChatMessage
        - to:
            description: call LLM
            uri: langchain4j-chat:getInformation
            parameters:
              chatOperation: CHAT_MULTIPLE_MESSAGES
        - log:
            message: ${body}
- route:
    from:
      uri: langchain4j-chat:getInformation?description=get wheather forecast
        of cities around the world&parameter.location=string
      steps:
        - log:
            message: "location is: ${header.location}"
        - setVariable:
            name: location
            simple:
              expression: "${header.location}"
        - removeHeaders:
            pattern: '*'
        - log:
            message: "got recomendation request for: ${exchangeProperty.location}"
        - setHeader:
            name: CamelHttpMethod
            simple:
              expression: GET
        - doTry:
            steps:
              - toD:
                  uri: "http://geodb-free-service.wirefreethought.com/v1/geo/places?namePrefix=${variable.location}&limit=1&sort=-population"
              - log:
                  message: "geodb response: ${body}"
              - unmarshal:
                  json:
                    library: Jackson
              - setVariable:
                  name: coordinates
                  simple:
                    expression: "latitude=${body[data][0][latitude]}&longitude=${body[data][0][longitude]}"
              - log:
                  message: "coordinates: ${variable.coordinates}"
              - removeHeaders:
                  pattern: '*'
              - setHeader:
                  name: CamelHttpMethod
                  simple:
                    expression: GET
              - toD:
                  # uri: "https://api.open-meteo.com/v1/forecast?${variable.coordinates}&current=temperature_2m&daily=temperature_2m_max&forecast_days=3"
                  uri: "https://api.open-meteo.com/v1/forecast?${variable.coordinates}&current=temperature_2m,precipitation&daily=temperature_2m_max,temperature_2m_min&forecast_days=3"
              - unmarshal:
                  json:
                    library: Jackson
              - setVariable:
                  name: temperature
                  simple:
                    expression: "${body[current][temperature_2m]}"
              - setVariable:
                  name: forecast
                  simple:
                    expression: "${body[daily][temperature_2m_max]}"
              - log:
                  message: "temperature: ${variable.temperature}"
              - log:
                  message: "forecast: ${variable.forecast}"
              - setVariable:
                  name: response
                  simple:
                    # expression: "{\"temperature\":\"${body[current][temperature_2m]}\"\
                    #   ,\"unit\":\"celsius\",\"forecast\": {\"day1\":\"${body[daily][temperature_2m_max][0]}\"\
                    #   ,\"day2\":\"${body[daily][temperature_2m_max][1]}\",\"day3\"\
                    #   :\"${body[daily][temperature_2m_max][2]}\"}}"
                    expression: >-
                      {
                        "unit":"celsius",
                        "temperature": {
                            "today": {
                              "${body[daily][time][0]}": "${body[current][temperature_2m]}"
                            },
                            "forecast": {
                              "${body[daily][time][1]}": {
                                "maximum":"${body[daily][temperature_2m_max][1]}"
                                },
                              "${body[daily][time][2]}": {
                                "maximum":"${body[daily][temperature_2m_max][2]}"
                                }
                            }
                        }
                      }

              - log:
                  message: "response: ${variable.response}"
              - setBody:
                  simple:
                    expression: "${variable.response}"
              - doCatch:
                  exception:
                    - java.lang.Exception
                  steps:
                    - log:
                        message: "error message was: ${exception.message}"
        - log:
            message: "cc: ${body}"
